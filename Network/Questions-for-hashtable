## 更快的哈希！
哈希表是根据键（Key）而直接访问在内存储存位置的数据结构，因为其高效，简易的借口，哈希表在很多场景中都有着广泛的场景，但是看似简单的结构可能并不像想象中那样简单。哈希函数，碰撞解决，动态调整大小等细节实现牵一发而动全身，各个方面的优化催生了各种奇巧的结构，如Cuckoo hash，HAMT，Linear Hashing、Litwin、Neimat等；哈希计算本身也有指令级别的加速，例如crc32指令；基于单独哈希算法的工程优化也是层出不穷，例如hotring。但今天我们抛开以上算法级别的细节，聚焦于单线程的链地址法，讨论哈希冲突的处理中使用链表的弊端与决解方案。

### 在链地址法中使用链表和数组有什么区别？
### 自己机器上cache line的计算方式？
### 在数组结构为struct {uint64 hash; char* value;}的情况下，冲突链在多长时rehash最有效？
### 尝试编码模拟IPC（instructions-per-cycle）较低的情况（cache miss 的情况下跨 NUMA 访问），并与一般情况做对比。
### 局部性原理
