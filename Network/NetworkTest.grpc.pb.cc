// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: NetworkTest.proto

#include "NetworkTest.pb.h"
#include "NetworkTest.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace NetworkTest {

static const char* NT_method_names[] = {
  "/NetworkTest.NT/AnswerRegister",
  "/NetworkTest.NT/ResultQuery",
};

std::unique_ptr< NT::Stub> NT::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NT::Stub> stub(new NT::Stub(channel, options));
  return stub;
}

NT::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AnswerRegister_(NT_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResultQuery_(NT_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NT::Stub::AnswerRegister(::grpc::ClientContext* context, const ::NetworkTest::Register& request, ::NetworkTest::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetworkTest::Register, ::NetworkTest::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AnswerRegister_, context, request, response);
}

void NT::Stub::async::AnswerRegister(::grpc::ClientContext* context, const ::NetworkTest::Register* request, ::NetworkTest::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetworkTest::Register, ::NetworkTest::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnswerRegister_, context, request, response, std::move(f));
}

void NT::Stub::async::AnswerRegister(::grpc::ClientContext* context, const ::NetworkTest::Register* request, ::NetworkTest::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AnswerRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetworkTest::Result>* NT::Stub::PrepareAsyncAnswerRegisterRaw(::grpc::ClientContext* context, const ::NetworkTest::Register& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetworkTest::Result, ::NetworkTest::Register, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AnswerRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetworkTest::Result>* NT::Stub::AsyncAnswerRegisterRaw(::grpc::ClientContext* context, const ::NetworkTest::Register& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAnswerRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NT::Stub::ResultQuery(::grpc::ClientContext* context, const ::NetworkTest::Query& request, ::NetworkTest::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NetworkTest::Query, ::NetworkTest::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResultQuery_, context, request, response);
}

void NT::Stub::async::ResultQuery(::grpc::ClientContext* context, const ::NetworkTest::Query* request, ::NetworkTest::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NetworkTest::Query, ::NetworkTest::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResultQuery_, context, request, response, std::move(f));
}

void NT::Stub::async::ResultQuery(::grpc::ClientContext* context, const ::NetworkTest::Query* request, ::NetworkTest::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResultQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NetworkTest::Result>* NT::Stub::PrepareAsyncResultQueryRaw(::grpc::ClientContext* context, const ::NetworkTest::Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::NetworkTest::Result, ::NetworkTest::Query, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResultQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::NetworkTest::Result>* NT::Stub::AsyncResultQueryRaw(::grpc::ClientContext* context, const ::NetworkTest::Query& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResultQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

NT::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NT_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NT::Service, ::NetworkTest::Register, ::NetworkTest::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetworkTest::Register* req,
             ::NetworkTest::Result* resp) {
               return service->AnswerRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NT_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NT::Service, ::NetworkTest::Query, ::NetworkTest::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NT::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NetworkTest::Query* req,
             ::NetworkTest::Result* resp) {
               return service->ResultQuery(ctx, req, resp);
             }, this)));
}

NT::Service::~Service() {
}

::grpc::Status NT::Service::AnswerRegister(::grpc::ServerContext* context, const ::NetworkTest::Register* request, ::NetworkTest::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NT::Service::ResultQuery(::grpc::ServerContext* context, const ::NetworkTest::Query* request, ::NetworkTest::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace NetworkTest

